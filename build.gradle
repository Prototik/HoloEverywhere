buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'org.holoeverywhere:plugin:0.2.2'
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'holoeverywhere-repo'

version = '19.0.1'

repositories {
    mavenLocal()
    mavenCentral()
}

def FileCollection getAndroidPrebuilt(String apiLevel) {
    files("${System.env.ANDROID_HOME}/platforms/android-$apiLevel/android.jar")
}

configurations {
    deployerJars

    eclairCompile
    froyoCompile
    gingerbreadCompile
    honeycombCompile 
    honeycombmr2Compile
    icsCompile
    icsmr1Compile
    jellybeanCompile
    jellybeanmr1Compile
    jellybeanmr2Compile
    kitkatCompile
}

sourceSets {
    main.java.srcDir 'java'
    eclair.java.srcDir 'eclair'
    eclairmr1.java.srcDir 'eclair-mr1'
    froyo.java.srcDir 'froyo'
    gingerbread.java.srcDir 'gingerbread'
    honeycomb.java.srcDir 'honeycomb'
    honeycombmr2.java.srcDir 'honeycomb_mr2'
    ics.java.srcDir 'ics'
    icsmr1.java.srcDir 'ics-mr1'
    jellybean.java.srcDir 'jellybean'
    jellybeanmr1.java.srcDir 'jellybean-mr1'
    jellybeanmr2.java.srcDir 'jellybean-mr2'
    kitkat.java.srcDir 'kitkat'
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ssh-external:2.2"

    eclairCompile getAndroidPrebuilt('7')
    eclairmr1Compile getAndroidPrebuilt('7')
    froyoCompile getAndroidPrebuilt('8')
    gingerbreadCompile getAndroidPrebuilt('10')
    honeycombCompile getAndroidPrebuilt('11')
    honeycombmr2Compile getAndroidPrebuilt('13')
    icsCompile getAndroidPrebuilt('14')
    icsmr1Compile getAndroidPrebuilt('15')
    jellybeanCompile getAndroidPrebuilt('16')
    jellybeanmr1Compile getAndroidPrebuilt('17')
    jellybeanmr2Compile getAndroidPrebuilt('18')
    kitkatCompile getAndroidPrebuilt('19')

    compile getAndroidPrebuilt('4')
    compile sourceSets.eclair.output
    compile sourceSets.eclairmr1.output
    compile sourceSets.froyo.output
    compile sourceSets.gingerbread.output
    compile sourceSets.honeycomb.output
    compile sourceSets.honeycombmr2.output
    compile sourceSets.ics.output
    compile sourceSets.icsmr1.output
    compile sourceSets.jellybean.output
    compile sourceSets.jellybeanmr1.output
    compile sourceSets.jellybeanmr2.output
    compile sourceSets.kitkat.output
}

jar {
    from sourceSets.eclair.output
    from sourceSets.froyo.output
    from sourceSets.gingerbread.output
    from sourceSets.honeycomb.output
    from sourceSets.honeycombmr2.output
    from sourceSets.ics.output
    from sourceSets.icsmr1.output
    from sourceSets.jellybean.output
    from sourceSets.jellybeanmr1.output
    from sourceSets.jellybeanmr2.output
    from sourceSets.kitkat.output
}

tasks.withType(Compile) {
    options.encoding = "UTF-8"
}

tasks.compileJava.sourceCompatibility = '1.6'
tasks.compileJava.targetCompatibility = '1.6'

jar {
    manifest.attributes('SupportLibraryVersion': "${project.version}-prok")
}

task generateJavadoc(type: Javadoc) {
    source    sourceSets.main.allJava
    source    sourceSets.eclair.allJava
    source    sourceSets.froyo.allJava
    source    sourceSets.gingerbread.allJava
    source    sourceSets.honeycomb.allJava
    source    sourceSets.honeycombmr2.allJava
    source    sourceSets.ics.allJava
    source    sourceSets.icsmr1.allJava
    source    sourceSets.jellybean.allJava
    source    sourceSets.jellybeanmr1.allJava
    source    sourceSets.jellybeanmr2.allJava
    source    sourceSets.kitkat.allJava
    classpath = project.files(configurations.compile)
}

task javadoc(type: Jar, dependsOn: generateJavadoc, overwrite: true) {
    from generateJavadoc.destinationDir
    classifier = 'javadoc'
}

task sources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from sourceSets.eclair.allSource
    from sourceSets.froyo.allSource
    from sourceSets.gingerbread.allSource
    from sourceSets.honeycomb.allSource
    from sourceSets.honeycombmr2.allSource
    from sourceSets.ics.allSource
    from sourceSets.icsmr1.allSource
    from sourceSets.jellybean.allSource
    from sourceSets.jellybeanmr1.allSource
    from sourceSets.jellybeanmr2.allSource
    from sourceSets.kitkat.allSource
}

artifacts {
    archives tasks.sources
    archives tasks.javadoc
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.groupId = 'com.android.support'
            pom.artifactId = 'support-v4'

            repository(url: project.properties.get('holoeverywhere.repo', 'file:///invalid_path')) {
                if (project.properties.containsKey('holoeverywhere.repo.username') && project.properties.containsKey('holoeverywhere.repo.key')) {
                    authentication(userName: project.properties.get('holoeverywhere.repo.username'), privateKey: project.properties.get('holoeverywhere.repo.key'))
                } else if (project.properties.containsKey('holoeverywhere.repo.username') && project.properties.containsKey('holoeverywhere.repo.password')) {
                    authentication(userName: project.properties.get('holoeverywhere.repo.username'), password: project.properties.get('holoeverywhere.repo.password'))
                }
            }

            pom.whenConfigured { pom ->
                pom.dependencies = pom.dependencies.findAll { dep -> dep.groupId != 'android' && dep.artifactId != 'android' }
            }

            pom.project {
                name 'Android Support Library v4'
                packaging 'jar'
                description 'Android Support library v4 with patches by ProK'
                url 'https://github.com/Prototik/HoloEverywhere'

                scm {
                    url 'https://github.com/Prototik/HoloEverywhere'
                    connection 'scm:git@github.com:Prototik/HoloEverywhere.git'
                    developerConnection 'scm:git@github.com:Prototik/HoloEverywhere.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://raw.github.com/Prototik/HoloEverywhere/master/LICENSE'
                        distribution 'repo'
                        comments 'Copyright (c) 2013 Sergey Shatunov'
                    }
                }

                developers {
                    developer {
                        id 'Prototik'
                        name 'Sergey Shatunov'
                        email 'prototypegamez@gmail.com'
                        timezone '+8'
                        roles {
                            role "developer"
                        }
                    }
                }
            }
        }
    }
}

